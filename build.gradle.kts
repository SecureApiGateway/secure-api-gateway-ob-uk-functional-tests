import org.gradle.api.tasks.testing.logging.TestExceptionFormat

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm") version "1.4.20"
    // https://github.com/edeandrea/xjc-generation-gradle-plugin
    id("com.github.edeandrea.xjc-generation") version "1.6"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven("https://www.jitpack.io")
    maven("https://maven.forgerock.org:443/repo/community")
    jcenter()
}

val jaxbVersion = "2.2.11"

dependencies {
    // xjc generation plugin dependencies
    xjc("javax.xml.bind:jaxb-api:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-xjc:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-core:${jaxbVersion}")
    xjc("javax.activation:activation:1.1.1")

    // Align versions of all Kotlin components
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    testImplementation("org.glassfish.jaxb:jaxb-runtime:2.3.0")



    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-api:5.7.0")
    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    // Test libraries
    testImplementation("com.github.kittinunf.fuel:fuel:2.2.1")
    testImplementation("com.github.kittinunf.fuel:fuel-jackson:2.2.1")
    testImplementation("com.github.kittinunf.fuel:fuel-gson:2.2.1")
    testImplementation("com.google.code.gson:gson:2.7")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.8")
    testImplementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8")
    testImplementation("com.willowtreeapps.assertk:assertk-jvm:0.17")
    testImplementation("io.jsonwebtoken:jjwt-api:0.10.7")
    testImplementation("io.jsonwebtoken:jjwt-impl:0.10.7")
    testImplementation("io.jsonwebtoken:jjwt-jackson:0.10.7")
    testImplementation("org.bouncycastle:bcprov-jdk16:1.46")
    testImplementation("io.r2:simple-pem-keystore:0.1")
    testImplementation("org.apache.httpcomponents:httpclient:4.5.9")
    testImplementation("org.assertj:assertj-core:3.13.2")
    testImplementation("javax.validation:validation-api:2.0.1.Final")
    testImplementation("commons-io:commons-io:2.6")
    testImplementation("com.nimbusds:nimbus-jose-jwt:9.0.1")
    testImplementation("com.forgerock.openbanking.uk:openbanking-uk-datamodel:3.1.2.26:tests")
    testImplementation("com.forgerock.openbanking:forgerock-openbanking-uk-extensions:1.0.24")
}

xjcGeneration {
    defaultBindingFile = null
    schemas.register("schema-pain.001.001.08")
    schemas {
        "schema-pain.001.001.08"{
            taskName = "gen-pain00100108-source"
            schemaRootDir = "src/test/resources/com/forgerock/openbanking/payment/file"
            schemaFile = "pain.001.001.08.xsd"
            // In local environment run first the task schemaGen-xxx or xjcGeneration to generate the objects
            // Remember use this package in kotlin test to resolve the object reference
            // @see line 92 from FilePaymentTest.kt
            javaPackageName = "com.forgerock.generated.xml.model.pain00100108"
        }
    }
}

java {                                      
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.register("serviceHealthCheck", Test::class)

tasks {
    compileKotlin {
        dependsOn("xjcGeneration")
    }
    test {
        environment("DOMAIN","master.forgerock.financial")
        useJUnitPlatform()
        dependsOn("serviceHealthCheck")
        // Use the built-in JUnit support of Gradle.
        group = "openbanking"
        description = "Runs ALL open banking functional tests"
        failFast = true
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = TestExceptionFormat.FULL
        systemProperty("junit.platform.output.capture.stdout", "true")
        systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    }
    "serviceHealthCheck"(Test::class) {
        useJUnitPlatform() {
            includeTags("servicesCheck")
        }
        group = "openbanking"
        description = "Runs the test to check the service status"
    }
}

