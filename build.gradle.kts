import org.gradle.api.tasks.testing.logging.TestExceptionFormat
//import org.jetbrains.gradle.ext.JUnit
//import org.jetbrains.gradle.ext.ProjectSettings
//import org.jetbrains.gradle.ext.RunConfiguration
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

/*
 * Global Variables
 */
// project version
version = "1.0.0"
// commit hash or release name to find the proper library aligned with the services deployed on a cluster
val release = "1.0.0"
val jaxbVersion = "2.2.11"

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm") version "1.4.20"
    // https://github.com/edeandrea/xjc-generation-gradle-plugin
    id("com.github.edeandrea.xjc-generation") version "1.6"
    id("maven-publish")
    //id("org.jetbrains.gradle.plugin.idea-ext") version "0.5"
    //id("jacoco")
}

// Enable junit extension autodetection for intellij
/*
idea {
    project {
        this as ExtensionAware
        configure<org.jetbrains.gradle.ext.ProjectSettings> {
            this as ExtensionAware
            configure<NamedDomainObjectContainer<RunConfiguration>> {
                this as PolymorphicDomainObjectContainer<RunConfiguration>
                project.afterEvaluate {
                    val jUnit = create("default_junit", JUnit::class) {
                        vmParameters = "-ea -Djunit.jupiter.extensions.autodetection.enabled=true "
                        envs = kotlin.collections.mapOf("DOMAIN" to domain)
                    }
                    jUnit.setDefaults(true)
                }
            }
        }
    }
}
*/
/*
* skip unused tasks
*/

/*
 * In case that we publish the artifact
 */
publishing {
    publications {
        register("securebanking-openbanking-uk-functional-tests", MavenPublication::class) {
            pom {
                name.set("securebanking-openbanking-uk-functional-tests")
                groupId = "com.forgerock.securebanking.test"
                artifactId = "securebanking-openbanking-uk-functional-tests"
                version = project.version.toString()
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven("https://www.jitpack.io")
    maven("https://maven.forgerock.org:443/repo/community")
}

configurations.all {
    //exclude("org.bouncycastle", "bcpkix-jdk15on")
    //exclude("org.bouncycastle", "bcprov-jdk15on")
}

dependencies {
    // xjc generation plugin dependencies
    xjc("javax.xml.bind:jaxb-api:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-xjc:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-core:${jaxbVersion}")
    xjc("javax.activation:activation:1.1.1")

    // Align versions of all Kotlin components
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("org.bouncycastle:bcprov-jdk16:1.46")

    testImplementation("org.glassfish.jaxb:jaxb-runtime:2.3.0")

    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-api:5.7.0")

    // Test libraries
    testImplementation("com.github.kittinunf.fuel:fuel:2.2.1")
    testImplementation("com.github.kittinunf.fuel:fuel-jackson:2.2.1")
    testImplementation("com.github.kittinunf.fuel:fuel-gson:2.2.1")
    testImplementation("com.google.code.gson:gson:2.7")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.8")
    testImplementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8")
    testImplementation("com.willowtreeapps.assertk:assertk-jvm:0.17")
    testImplementation("io.jsonwebtoken:jjwt-api:0.10.7")
    testImplementation("io.jsonwebtoken:jjwt-impl:0.10.7")
    testImplementation("io.jsonwebtoken:jjwt-jackson:0.10.7")
    //testImplementation("org.bouncycastle:bcprov-jdk16:1.46")
    testImplementation("io.r2:simple-pem-keystore:0.1")
    testImplementation("org.apache.httpcomponents:httpclient:4.5.9")
    testImplementation("org.assertj:assertj-core:3.13.2")
    testImplementation("javax.validation:validation-api:2.0.1.Final")
    testImplementation("commons-io:commons-io:2.6")
    testImplementation("com.nimbusds:nimbus-jose-jwt:9.0.1")
    testImplementation("com.forgerock.openbanking.uk:openbanking-uk-datamodel:3.1.8.0:tests")
    testImplementation("com.forgerock.openbanking:forgerock-openbanking-uk-extensions:1.4.4")
}

/*
 * Generate the payment objects from defined schema
 */
xjcGeneration {
    defaultBindingFile = null
    schemas.register("schema-pain.001.001.08")
    schemas {
        "schema-pain.001.001.08"{
            taskName = "gen-pain00100108-source"
            schemaRootDir = "src/test/resources/com/forgerock/securebanking/payment/file"
            schemaFile = "pain.001.001.08.xsd"
            // In local environment run first the task schemaGen-xxx or xjcGeneration to generate the objects
            // Remember use this package in kotlin test to resolve the object reference
            // @see line 92 from FilePaymentTest.kt
            javaPackageName = "com.forgerock.generated.xml.model.pain00100108"
        }
    }
}

/*
 * Java definitions
 */
java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

tasks.register<Copy>("copyOBCertificates") {
    group = "forgerock"
    from("certs/automating-testing/")
    include("*.pem","*.key")
    into("src/test/resources/com/forgerock/uk/openbanking/eidas")
}

/*
 ********************************************************************
 * TASKS
 ********************************************************************
 */
/*
 * scope generic tasks
 */
tasks {
    compileKotlin {
        dependsOn("copyOBCertificates")
    }
    test {
        useJUnitPlatform()
        dependsOn("serviceHealthCheck")
        description = "Runs ALL tests"
    }
}

// To generate the tests library
tasks.register<Jar>("generateTestJar") {
    group = "forgerock"
    description = "Generate a non-executable jar library tests"
    archiveClassifier.set("tests")
    archiveFileName.set("${project.name}-${project.version}-$release.jar")
    from(sourceSets.test.get().allSource)
    from(sourceSets.main.get().allSource)
    dependsOn("testClasses")
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to "Secure Banking Accelerator Functional Tests",
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.version,
                "Created-by" to "${project.version} (forgerock)",
                "Built-by" to System.getProperty("user.name"),
                "Build-Jdk" to JavaVersion.current(),
                "Source-Compatibility" to project.properties["sourceCompatibility"],
                "Target-Compatibility" to project.properties["targetCompatibility"]
            )
        )
    }
}

/* ************************************************* */
/* specific common definition for all task test type */
/* ************************************************* */
// default domain and optional domains
val domain = "dev.forgerock.financial"
//val domain = "master.forgerock.financial"
// val domain = "dev-ob.forgerock.financial:8074"

tasks.withType<Test>().configureEach {
    useJUnitPlatform()
    // use by command line i.e: gradle payments -Pdomain="mydomain"
    if (project.hasProperty("domain")) {
        environment("DOMAIN", project.property("domain").toString())
    } else {
        environment("DOMAIN", domain)
    }
    println("RUNNING [" + name + "] tests, DOMAIN --> " + environment["DOMAIN"])

    // all task to run all tests depends of check service except the health check task
    if (name != "serviceHealthCheck" && name != "singleTest") {
        dependsOn("serviceHealthCheck")
    }

    group = "forgerock-tests"

    // execution conditions (see readme file)
    systemProperty("junit.platform.output.capture.stdout", "true")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")

    /* execution properties */
    // Indicates if this task will fail on the first failed test
    failFast = true
    minHeapSize = "512M"
    maxHeapSize = "2G"
    // You can run your tests in parallel by setting this property to a value greater than 1
    // default value when isn't set in the task
    maxParallelForks = 1
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = TestExceptionFormat.FULL
}
/* ********************************************* */
/*                 TEST TASKS                    */
/* ********************************************* */
// tests properties
val packagePrefix = "com.forgerock.securebanking."
val suffixPattern = ".*"

tasks.register<Test>("serviceHealthCheck") {
    filter {
        includeTestsMatching(packagePrefix + "servicecheck" + suffixPattern)
    }
    description = "Runs the test to check the service status"
}

/* PAYMENTS */
tasks.register<Test>("all.payments") {
    group = "forgerock-tests-payments"
    description = "Runs the payment tests"
    filter {
        includeTestsMatching(packagePrefix + "payment" + suffixPattern)
    }
}

tasks.register<Test>("domesticPayments") {
    group = "forgerock-tests-payments"
    description = "Runs the payment tests"
    filter {
        includeTestsMatching(packagePrefix + "payment.domestic" + suffixPattern)
    }
}

tasks.register<Test>("filePayments") {
    group = "forgerock-tests-payments"
    description = "Runs the payment tests"
    filter {
        includeTestsMatching(packagePrefix + "payment.file" + suffixPattern)
    }
}

tasks.register<Test>("internationalPayments") {
    group = "forgerock-tests-payments"
    description = "Runs the payment tests"
    filter {
        includeTestsMatching(packagePrefix + "payment.international" + suffixPattern)
    }
}

/* ACCOUNTS */
tasks.register<Test>("accounts") {
    description = "Runs the account tests"
    filter {
        includeTestsMatching(packagePrefix + "account" + suffixPattern)
    }
}

tasks.register<Test>("accessToken") {
    description = "Runs the access token tests"
    filter {
        includeTestsMatching(packagePrefix + "as" + suffixPattern)
    }
}

tasks.register<Test>("bank") {
    description = "Runs the bank tests"
    filter {
        includeTestsMatching(packagePrefix + "bank" + suffixPattern)
    }
}

tasks.register<Test>("directory") {
    description = "Runs the directory tests"
    filter {
        includeTestsMatching(packagePrefix + "directory" + suffixPattern)
    }
}

/* EVENTS */

tasks.register<Test>("all.events") {
    group = "forgerock-tests-events"
    description = "Runs the event tests"
    filter {
        includeTestsMatching(packagePrefix + "event" + suffixPattern)
    }
}

tasks.register<Test>("aggregatedpolling") {
    group = "forgerock-tests-events"
    description = "Runs the event tests"
    filter {
        includeTestsMatching(packagePrefix + "event.aggregatedpolling" + suffixPattern)
    }
}

tasks.register<Test>("callbacks") {
    group = "forgerock-tests-events"
    description = "Runs the event tests"
    filter {
        includeTestsMatching(packagePrefix + "event.callback" + suffixPattern)
    }
}

tasks.register<Test>("subscriptions") {
    group = "forgerock-tests-events"
    description = "Runs the event tests"
    filter {
        includeTestsMatching(packagePrefix + "event.sub" + suffixPattern)
    }
}

tasks.register<Test>("fundsConfirmation") {
    description = "Runs the funds confirmation tests"
    filter {
        includeTestsMatching(packagePrefix + "funds" + suffixPattern)
    }
}

tasks.register<Test>("matls") {
    description = "Runs the matls tests"
    filter {
        includeTestsMatching(packagePrefix + "mtls" + suffixPattern)
    }
}

tasks.register<Test>("registration") {
    description = "Runs the registration tests"
    filter {
        includeTestsMatching(packagePrefix + "onboarding" + suffixPattern)
    }
}

// recomended use that task only on local
tasks.register<Test>("all") {
    description = "Runs all tests"
    filter {
        includeTestsMatching("$packagePrefix*")
        // to avoid run twice the same tests, the serviceCheckHealth task will run before this task
        // such as a dependency
        excludeTestsMatching(packagePrefix + "servicecheck" + suffixPattern)
    }
    failFast = false
}

tasks.register<Test>("singleTest") {
    description = "Runs open banking single functional tests"
}
